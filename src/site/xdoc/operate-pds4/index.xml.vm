<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2019-2023, California Institute of Technology ("Caltech").
  U.S. Government sponsorship acknowledged.
  
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  * Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
  * Redistributions must reproduce the above copyright notice, this list of
  conditions and the following disclaimer in the documentation and/or other
  materials provided with the distribution.
  * Neither the name of Caltech nor its operating division, the Jet Propulsion
  Laboratory, nor the names of its contributors may be used to endorse or
  promote products derived from this software without specific prior written
  permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
-->

<document>
  <properties>
    <title>Operation (PDS4)</title>
    <author email="Jordan.h.Padams@jpl.nasa.gov">Jordan Padams</author>
  </properties>

  <body>
    <section name="Operation (PDS4)">
      <p>This document describes how to operate the Harvest Tool software for use with PDS4 data product registration. The following topics can be found in this document:
      </p>

      <ul>
        <li><a href="#Overview">Overview</a></li>
        <li><a href="#Quick_Start">Configuration Quick Start</a></li>
        <ul>
          <li><a href="#Setup">Setup and Overview of Policy Files</a></li>
          <li><a href="#Walk-Through">Walking Through the Policy Config</a></li>
          <li><a href="#Minimal_Config">Minimal Config</a></li>
          <li><a href="#Running_The_Tool">Running The Tool</a></li>
        </ul>
        <li><a href="#Command-Line Options">Command-Line Options</a></li>
        <li><a href="#Advanced_Usage">Advanced Usage</a></li>
        <li><a href="#Harvest_Policy_File">Harvest Policy File</a></li>
        <li><a href="#Search_API_Config_Files">Search API Config Files</a></li>
        <li><a href="#Report_Format">Report Format</a></li>
        <li><a href="#Common_Errors">Common Errors</a></li>
      </ul>

    </section>

    <hr />
    <section name="Overview">
      <p>
        Harvest Tool is a highly configurable flexible tool for ingesting metadata from PDS4 labels and products. However, due to it's highly configurable nature
      it is also very complex and has a fairly significant learning curve. This section will provide an overview of what is needed in order to get started.
      </p>
      
      <subsection name="Tutorial">
        <p>The PDS Engineering Node website has a procedure for <a href="https://pds-engineering.jpl.nasa.gov/content/pds4_data_release_discipline_nodes">Data Releases at Discipline Nodes</a>, 
          which contains an example set for walking through the ingestion of some data into the Registry get a sense of how it works. If you would like to dive right in, continue on through the more detailed 
          configuration and execution of the tool.
        </p>
      </subsection>
      
      <subsection name="Quick Start">
        <p>Move onto the <a href="#Quick_Start">Quick Start Guide</a> for a background on configuring the policy files and executing Harvest.
        </p>
      </subsection>
      
      <subsection name="Add New Search Fields to 'data' collection">
        <p>Harvest and the Registry can be configured to add additional fields to the searchable "data" collection. The process can be cumbersome, 
          so feel free to reach out to Engineering Node for assistance:
        </p>
        
        <ul>
          <li><a href="#Candidate_Products">Add a new slot to the applicable policy candidate</a></li>
          <li><a href="#Search_API_Config_Files">Add a new field to the applicable Search API Config File</a></li>
          <li>Add a new field to the data schema throug the <a href="https://lucene.apache.org/solr/guide/8_2/schema-api.html">Solr Schema API</a> or </li>
        </ul>
      </subsection>
    </section>

    <hr />
    <section name="Quick Start">
      <p>This section is intended to give a quick and easy way to set up the Harvest policy configuration file and run the tool. For a more detailed explanation on other ways to set up the policy configuration file as well as other ways of running the tool, go to the <a href="#Harvest_Policy_File">Harvest Policy File</a> and <a href="#Advanced_Usage">Advanced Usage</a> sections.
      </p>

      <ul>
        <li><a href="#Setup">Initial Policy Setup</a></li>
        <li><a href="#Walk-Through">Walking Through the Policy Config</a></li>
        <li><a href="#Minimal_Config">Minimal Config</a></li>
      </ul>

      <hr />
      <subsection name="Setup">
        <p>Included in the Harvest package is a master policy example configuration file for PDS4 product registration. 
          Go to the <i>examples/</i> folder, make a copy of the <i>harvest-policy-master.xml</i> file and modify it as necessary.
        </p>
        <p>Next, you can continue on to the <a href="#Walk-Through">Walk-Through</a> to learn about the various sections of the config and how to modify them.<br />
          Or you can head to the <a href="#Minimal_Config">Minimal Config</a> section to make some minor mods to the config to get started testing.</p>
      </subsection>

      <hr />
      <subsection name="Walk-Through">
        <h5>Collections</h5>

        <source>
&lt;collections&gt;
  &lt;file&gt;$HOME/dph_example_archive_VG2PLS/browse/Collection_browse.xml&lt;/file&gt;
  &lt;file&gt;$HOME/dph_example_archive_VG2PLS/context/Collection_context.xml&lt;/file&gt;
  &lt;file&gt;$HOME/dph_example_archive_VG2PLS/data/Collection_data.xml&lt;/file&gt;
  &lt;file&gt;$HOME/dph_example_archive_VG2PLS/document/Collection_document.xml&lt;/file&gt;
  &lt;file&gt;$HOME/dph_example_archive_VG2PLS/xml_schema/Collection_xml_schema.xml&lt;/file&gt;
&lt;/collections&gt;
        </source>

        <p>Specify collection products here. This allows Harvest to be able to distinguish between primary members and secondary members of a collection while traversing a target directory.
        </p>

        <h5>Directories</h5>

        <source>
&lt;directories&gt;
  &lt;path&gt;$HOME/dph_example_archive_VG2PLS&lt;/path&gt;
  &lt;fileFilter&gt;
    &lt;include&gt;*.xml&lt;/include&gt;
  &lt;/fileFilter&gt;
&lt;/directories&gt;
        </source>

        <p>Specify the top level directory for Harvest to crawl for products to register.
        </p>

        <h5>Access URLs</h5>

        <source>
&lt;accessUrls harvest:registerFileUrls="false"&gt;
  &lt;accessUrl&gt;
    &lt;baseUrl&gt;http://starbase.jpl.nasa.gov&lt;/baseUrl&gt;
    &lt;offset&gt;$HOME&lt;/offset&gt;
  &lt;/accessUrl&gt;
&lt;/accessUrls&gt;
        </source>

        <p>Specify the base URL of where the physical data products are located. This allows Harvest to provide links to the physical data products in the slots of each registered product in the Registry.
        </p>
        
        <p>For the example above, if a bundle is online at <b>http://starbase.jpl.nasa.gov/</b>dph_example_archive_VG2PLS/<br /><br />
        
        And on the machine you are running Harvest, the path to that bundle is <b>$HOME/</b>dph_example_archive_VG2PLS/<br /><br />
        
        In order for Harvest to registry this product with this URL, we need to specify what path <i>offset</i>
        should be replaced with the <i>baseUrl</i>. In this case, the offset = $HOME, and the baseUrl is
        http://starbase.jpl.nasa.gov .
        </p>

        <h5>Checksums</h5>

        <source>
&lt;checksums harvest:generate="true"&gt;
  &lt;manifest harvest:basePath="$HOME/dph_example_archive_VG2PLS"&gt;
    $HOME/dph_example_archive_VG2PLS/bundle_checksums.txt
  &lt;/manifest&gt;
&lt;/checksums&gt;
        </source>

        <p>Specify a Checksum Manifest file. The <i>basePath</i> attribute is used to resolve relative file references, if found, within a Manifest file. If this attribute is not specified in the policy configuration file, the default behavior is to use the target directory as the base path. If there are multiple target directories specified, then it is required to explicitly specify a base path value in the policy.
        </p>
        
        <p>With this configuration, Harvest will generate checksums for each file object to be registered and compare against the supplied checksums in the data product label as well as the manifest file.
        </p>

        <h5>Candidate Products</h5>

        <source>
&lt;candidates&gt;

...

  &lt;productMetadata harvest:objectType="Product_Browse"&gt;
    &lt;xPath harvest:slotName="information_model_version"&gt;
      //Identification_Area/information_model_version
    &lt;/xPath&gt;

...

&lt;candidates&gt;
        </source>

        <p>Specify any additional product types for Harvest to register here. Note that Harvest reads in an internal global policy config which already includes the following product types:
        </p>

        <ul>
          <li>Product_Attribute_Definition</li>
          <li>Product_Bundle</li>
          <li>Product_Class_Definition</li>
          <li>Product_Collection</li>
          <li>Product_Context</li>
          <li>Product_Data_Set_PDS3</li>
          <li>Product_Instrument_Host_PDS3</li>
          <li>Product_Instrument_PDS3</li>
          <li>Product_Mission_PDS3</li>
          <li>Product_Subscription_PDS3</li>
          <li>Product_Target_PDS3</li>
          <li>Product_Volume_PDS3</li>
          <li>Product_Volume_Set_PDS3</li>
        </ul>

        <p>Additionally, the <i>candidates</i> section in this policy config example already specifies the following product types:
        </p>

        <ul>
          <li>Product_Browse</li>
          <li>Product_Document</li>
          <li>Product_File_Text</li>
          <li>Product_Observational</li>
          <li>Product_XML_Schema</li>
        </ul>

        <p>For the <i>Product_Observational</i> area:
        </p>

        <source>
&lt;productMetadata harvest:objectType="Product_Observational"&gt;
  &lt;!-- Identification_Area --&gt;
  &lt;xPath harvest:slotName="information_model_version"&gt;
    //Identification_Area/information_model_version
  &lt;/xPath&gt;
  &lt;xPath harvest:slotName="product_class"&gt;
    //Identification_Area/product_class
  &lt;/xPath&gt;
  &lt;xPath harvest:slotName="alternate_id"&gt;
    //Identification_Area/Alias_List/Alias/alternate_id
  &lt;/xPath&gt;
  &lt;xPath harvest:slotName="alternate_title"&gt;
    //Identification_Area/Alias_List/Alias/alternate_title
  &lt;/xPath&gt;
  &lt;xPath harvest:slotName="citation_author_list"&gt;
    //Identification_Area/Citation_Information/author_list
  &lt;/xPath&gt;
...
&lt;/productMetadata&gt;
        </source>

        <p>add XPaths, as well as a meaningful slot name, for the &lt;Discipline_Area&gt; and &lt;Mission_Area&gt; metadata of interest to be included for every <i>Product_Observational</i> registration.
        </p>

        <p>Note that the XPaths already defined in the example policy should not be modified as it allows the Registry to be populated with a consistent set of metadata for every product that is registered.
        </p>


        <h5>Namespaces</h5>

        <p>It is highly encouraged to define this in the policy when specifying XPaths to metadata that reside in a namespace other than the default PDS namespace. Doing so will make the policy more readable.
        </p>

        <p>As an example, check out this PDS4 data product label  <a href="index-data-product-label.html">here</a>, which contains metadata within the &lt;Discipline_Area&gt; and &lt;Mission_Area&gt; sections that reside in namespaces other than the default PDS namespace. To extract metadata from these sections, do the following:
        </p>

        <p>Set the namespaces in the <i>candidates</i> section of the policy config file:
        </p>

        <source>
&lt;candidates&gt;
  &lt;namespace harvest:prefix="disp" harvest:uri="http://pds.nasa.gov/pds4/disp/v1"/&gt;
  &lt;namespace harvest:prefix="sp" harvest:uri="http://pds.nasa.gov/pds4/sp/v1"/&gt;
  &lt;namespace harvest:prefix="geom" harvest:uri="http://pds.nasa.gov/pds4/geom/v0"/&gt;
  &lt;namespace harvest:prefix="sbn" harvest:uri="http://pds.nasa.gov/pds4/sbn/v0"/&gt;
  &lt;namespace harvest:prefix="epoxi" harvest:uri="http://pds.nasa.gov/pds4/mission/epoxi/v0"/&gt;

...

&lt;/candidates&gt;
        </source>

        <p>Then add the additional XPaths to extract metadata within the &lt;Discipline_Area&gt; and &lt;Mission_Area&gt; sections from <i>Product_Observational</i> products:
        </p>

        <source>
  &lt;productMetadata harvest:objectType="Product_Observational"&gt;

...

    &lt;!-- Mission_Area metadata --&gt;
    &lt;xPath harvest:slotName="spacecraft_clock_start_count"&gt;
      //Mission_Area/epoxi:EPOXI_Attributes/epoxi:Observation_Parameters/epoxi:spacecraft_clock_start_count
    &lt;/xPath&gt;
    &lt;xPath harvest:slotName="spacecraft_clock_stop_count"&gt;
      //Mission_Area/epoxi:EPOXI_Attributes/epoxi:Observation_Parameters/epoxi:spacecraft_clock_stop_count
    &lt;/xPath&gt;
    &lt;xPath harvest:slotName="total_integration_time"&gt;
      //Mission_Area/epoxi:EPOXI_Attributes/epoxi:Observation_Parameters/epoxi:total_integration_time
    &lt;/xPath&gt;

    &lt;!-- Discipline_Area metadata --&gt;
    &lt;xPath harvest:slotName="start_julian_date"&gt;
      //Discipline_Area/sbn:Times/sbn:start_Julian_date
    &lt;/xPath&gt;
    &lt;xPath harvest:slotName="display_settings_local_reference_type"&gt;
      //Discipline_Area/disp:Display_Settings/disp:Local_Internal_Reference/disp:local_reference_type
    &lt;/xPath&gt;
    &lt;xPath harvest:slotName="special_characteristics_local_identifier_reference"&gt;
      //Discipline_Area/sp:Spectral_Characteristics/sp:local_identifier_reference
    &lt;/xPath&gt;
    &lt;xPath harvest:slotName="geometry_vertical_display_direction"&gt;
      //Discipline_Area/geom:Geometry/geom:Image_Display_Geometry/geom:Display_Direction/disp:vertical_display_direction
    &lt;/xPath&gt;
  &lt;/productMetadata&gt;

&lt;/candidates&gt;
        </source>

        <p>Note that the XPaths are utilizing the <i>prefix</i> values from the namespaces defined in the policy.
        </p>
      </subsection>
      
      <hr />
      <subsection name="Minimal Config">
        <p>To get data ingested into the Registry as soon as possible to start testing out the system, the only portion of your custom <i>harvest-policy-master.xml</i>
        file mentioned in the <a href="#Setup">Setup</a> section is the <i>directories</i> section. Modify that to point at a bundle/collection and you can test ingestion:
          <source>
&lt;directories&gt;
  &lt;path>$HOME/dph_example_archive_VG2PLS&lt;/path&gt;
  &lt;fileFilter&gt;
    &lt;include&gt;*.xml&lt;/include&gt;
  &lt;/fileFilter&gt;
&lt;/directories&gt;
          </source>
        </p>
      </subsection>

      <hr />
      <subsection name="Running The Tool">
        <p>The following command demonstrates the recommended way to run Harvest:

        <source>
%> ./harvest -c ../conf/harvest/harvest-policy-master.xml -o $REGISTRY_HOME/../registry-data/solr-docs
        </source>

        In the example above, the <i>-c</i> flag option specifies the recommended master harvest policy configuration file to start configuration from,
        while the <i>-o</i> flag option specifies the output directory for the Solr Docs. Modify the paths as needed for your installation.
       </p>
        
        <p><b>Example summary output:</b>
        <source>
Summary:

15 of 15 file(s) processed, 3 other file(s) skipped
0 error(s), 0 warning(s)

Product Labels:
15         Successfully registered
0          Failed to register

Search Service Solr Documents:
15         Successfully created
0          Failed to get created

XPath Solr Documents (Quick Look Only, Ignore Failed Ingestions):
15         Successfully registered
0          Failed to register

Product Types Handled:
1 Product_Observational
5 Product_Collection
2 Product_Document
1 Product_Browse
3 Product_File_Text
2 Product_Context
1 Product_Bundle


Registry Package Id: a942ad0d-ad42-4007-9733-d12c3e53049f

End of Log
        </source>
        </p>


        <p><b>What Just Happened?</b><br />The above command will register the full product label and some associated archival metadata into the <i>registry</i> collection, and   
          all the XPaths of the label in the <i>xpath</i> collection.
        </p>
        
        <p><b>What Next?</b><br />
        Next, ingest the metadata in the search-friendly, <i>data</i> collection using the <a href="https://nasa-pds-incubator.github.io/registry/operate/index.html#Registry_Manager_Tool">Report Manager Tool</a> <i>(report-mgr)</i>.
        </p>
        
        <p>For more information on the Registry and it's metadata stores (or collections), see the <a href="https://nasa-pds-incubator.github.io/registry/operate/">Registry Documentation</a>.
        </p>
      </subsection>
    </section>

    <hr />
    <section name="Command-Line Options">
      <p>The following table describes the command-line options available:
      </p>
      <source>
./harvest --help
usage: harvest &lt;options&gt;
 -c,--harvest-config &lt;file&gt;   Specify the harvest policy configuration file to
                              set the tool behavior. (This flag is required)
 -C,--doc-config &lt;dir&gt;        Specify the directory location where the document
                              generation configuration files reside. The default
                              is to look in the 'search-conf' directory that
                              resides in the tool package
 -D,--ignore-dir &lt;patterns&gt;   Specify patterns to look for when crawling a
                              target directory for sub-directories to ignore.
                              Each pattern should be surrounded by quotes. (i.e.
                              -i "CATALOG")
 -e,--regexp &lt;patterns&gt;       Specify file patterns to look for when crawling a
                              target directory. Each pattern should be
                              surrounded by quotes. (i.e. -e "*.xml")
 -h,--help                    Display usage.
 -l,--log-file &lt;file name&gt;    Specify a log file name. Default is standard out.
 -o,--output-dir &lt;dir&gt;        Specify a directory location to tell the tool
                              where to output the Solr documents. The default is
                              to write to the current working directory.
 -P,--port &lt;number&gt;           Specify a port number to use if running the tool
                              in persistance mode.
 -pds3,--is-pds3-dir          Specify this flag to indicate that the target
                              passed into the command-line is a PDS3 directory.
                              The default assumes that any targets passed into
                              the command line are PDS4 directories.
 -v,--verbose &lt;level&gt;         Specify the severity level and above to include in
                              the log: (0=Debug, 1=Info, 2=Warning, 3=Error).
                              Default is Info and above (level 1).
 -V,--version                 Display application version.
 -w,--wait &lt;seconds&gt;          Specify the wait time in seconds in between crawls
                              if running in persistance mode
      </source>
    </section>

    <section name="Advanced Usage">
      <p>This section describes more advanced ways to run the tool, as well as its behaviors and caveats.
      </p>

      <subsection name="Tool Execution">
        <p>The Harvest Tool operates with a policy file to register and index product metadata. Details on how to create this policy file can be found in the <a href="#Harvest_Policy_File">Harvest Policy File</a> section.
        </p>

        <p>This section demonstrates some of the other ways that the tool can be executed:
        </p>

        <ul>
          <li>Indexing more metadata</li>
          <li>Registering Products From Targets Specified In The Policy File</li>
          <li>Registering Products From a Single Target</li>
          <li>Registering Products From Multiple Targets</li>
          <li>Excluding Sub-Directories To Traverse From a Target</li>
        </ul>

        <h5>Indexing more metadata</h5>

        <p>What gets indexed into the Registry and Search indexes is determined by a set of document generation configuration files. In the majority of use-case scenarios, the default set of configuration files provided in the <i>conf/search/defaults</i> directory is sufficient and is included by default, however you can also specify other config to pass into the tool using the <i>-C, --doc-config</i> flag option like so:
        </p>

        <source>
% harvest $HOME/directory -e "*.xml" -c ../conf/harvest/harvest-policy-master.xml -l harvest.log
        </source>

        <p>The Harvest Tool package provides examples of how other document generation configuration files were set up to ingest bundles from various missions. They can be found in the <i>conf/search</i> directory. The following command demonstrates registering and indexing the MAVEN NGIMS bundle and post to the data collection:
        </p>
        
        <source>
% ./harvest -c ../conf/harvest/harvest-policy-maven-ngims.xml -C ../conf/search/maven-ngims \
-o $REGISTRY_HOME/../registry-data -l ../harvest-maven-ngims.log

% registry-mgr $REGISTRY_HOME/../registry-data
        </source>
        
        <p>For more details on document generation configuration files, see the <a href="Search_API_Config_Files">Search API Config Files Section</a>.
        </p>
        
        <h5>Registering Products From Targets Specified In The Policy File</h5>

        <p>Targets can either be specified on the command-line or in in the policy file. Any targets specified on the command-line will overwrite any targets specified in the policy file. The following command demonstrates registering products based on targets specified in the policy file, <i>policy.xml</i>:
        </p>

        <source>
% ./harvest -c policy.xml
        </source>        

        <h5>Registering Products From a Single Target</h5>

        <p>The following command demonstrates how to register products to a non-secured registry instance from a target directory, <i>$HOME/directory</i>, where only files that end with a <i>.xml</i> file extension, will be processed:
        </p>

        <source>
% ./harvest $HOME/directory -e "*.xml" -c policy.xml
        </source>

        <h5>Registering Products From Multiple Targets</h5>

        <p>The following command demonstrates how to register products to a non-secured registry instance from two target directories, <i>$HOME/directory1</i> and <i>$HOME/directory2</i>, using the policy file, <i>policy.xml</i>. Only files that end with a <i>.xml</i> file extension will be processed. The output will go to a log file, <i>log-file.txt</i>:
        </p>

        <source>
% ./harvest $HOME/directory1, $HOME/directory2 -e "*.xml" -c policy.xml -l log-file.txt
        </source>

        <h5>Excluding Sub-Directories To Traverse From a Target</h5>

        <p>The following command demonstrates registering products from a target directory, <i>$HOME/directory</i>, where the tool will not traverse the sub-directory <i>CONTEXT</i>:
        </p>

        <source>
% ./harvest $HOME/directory -c policy.xml -D "CONTEXT"
        </source>

      </subsection>

      <subsection name="Persistence Mode">
        <p>The Harvest Tool can be run in persistence mode through an XML-RPC accessible web service called a daemon. Under this scenario, the Harvest Tool wakes up periodically, inspects a target directory or directories, and registers the latest products. This section details how to set this up.
        </p>

        <p>In order to run the tool through the daemon, the command-line option flags <i>-P</i> and <i>-w</i> need to be used. This tells the Harvest Tool the port number to use and how long to sleep in between crawls, respectively. When the daemon is running, it can be accessed through the following url: <i>http://localhost:{port number}/xmlrpc</i>. The following command demonstrates launching the Harvest Tool through the daemon on port <i>9001</i>, where it will wait 120 seconds in between crawls:
        </p>

        <source>
% ./harvest -c policy.xml -l log.txt -P 9001 -w 120
        </source>

        <p>After running the above command, the daemon will be accessible at <i>http://localhost:9001/xmlrpc</i>.
        </p>

        <p>In order to stop the daemon from running, a daemon controller is needed. The <i>bin/</i> directory of the Harvest Tool release package contains a shell script, <i>harvest-ctrl</i>, and a batch file, <i>harvest-ctrl.bat</i>, which are used to gracefully shut down the daemon service on a UNIX-like and Windows system, respectively. In addition, they can provide a few additional statistics about the crawling.
        </p>

        <p>The following table describes the command-line options available for <i>harvest-ctrl</i>:
        </p>

        <table>
          <tr><th>Command-Line Option</th><th>Description</th></tr>
          <tr><td>--url</td><td>Specify the URL of the daemon service running the Harvest Tool.</td></tr>
          <tr><td>--operation</td><td>Specify a single operation to perform. List of valid operations can be found in the next table.</td></tr>
        </table>

        <p>The following table describes the operation names available to pass with the <i>--operation</i> command-line option:
        </p>

        <table>
          <tr><th>Operation Option</th><th>Description</th></tr>
          <tr><td>--stop</td><td>Specify this operation to shut down the daemon service.</td></tr>
          <tr><td>--isRunning</td><td>Gives an indication whether the daemon service is running.</td></tr>
          <tr><td>--getNumCrawls</td><td>Returns the number of crawls that have occurred.</td></tr>
          <tr><td>--getWaitInterval</td><td>Returns the time, in seconds, that the crawler has to wait in between crawls.</td></tr>
          <tr><td>--getMilisCrawling</td><td>Returns the amount of milliseconds spent crawling.</td></tr>
          <tr><td>--getAverageCrawlTime</td><td>Returns the average amount of time, in milliseconds, spent during each crawl.</td></tr>
        </table>

        <p>The following examples demonstrate how to run <i>harvest-ctrl</i> using a few of the different operations. For demonstration purposes, assume that the daemon service is located at the following url: <i>http://localhost:9001/xmlrpc</i>.
        </p>

        <h5>Determine the Status of the Daemon Service</h5>

        <p>The following command is used to find out if the daemon service is still running:
        </p>

        <source>
% harvest-ctrl --url http://localhost:9001/xmlrpc --operation --isRunning
        </source>

        <h5>Shutdown the Daemon Service</h5>

        <p>The following command demonstrates shutting down the daemon service:
        </p>

        <source>
% harvest-ctrl --url http://localhost:9001/xmlrpc --operation --stop
        </source>
      </subsection>
   </section>

   <section name="Harvest Policy File">
     <p>The Harvest policy file is an XML-based configuration file that the tool uses to find products and register their metadata. The schema for the policy file can be found in the <a href="index-policy-schema.html">Harvest Policy Schema</a> section. This section describes the valid elements that are available to setup the policy file to do PDS4 data product registration.
     </p>

     <subsection name="PDS4 Data Product Registration">
       <p>The following is an example of a policy file to perform registration of PDS4 data products:
       </p>

       <source>
&lt;policy&gt;
  &lt;registryPackage&gt;
    &lt;name&gt;Harvest Package Example&lt;/name&gt;
    &lt;description&gt;This is an example of a Harvest run.&lt;/description&gt;
  &lt;/registryPackage&gt;

  &lt;collections&gt;
    &lt;file&gt;$HOME/VG2PLS_archive/data/Collection_Data.xml&lt;/file&gt;
    &lt;file&gt;$HOME/VG2PLS_archive/document/Collection_document.xml&lt;/file&gt;
  &lt;/collections&gt;

  &lt;directories&gt;
    &lt;path&gt;$HOME/VG2PLS_archive&lt;/path&gt;
    &lt;fileFilter&gt;
      &lt;include&gt;*.xml&lt;/include&gt;
    &lt;/fileFilter&gt;
    &lt;directoryFilter&gt;
      &lt;exclude&gt;CONTEXT&lt;/exclude&gt;
    &lt;/directoryFilter&gt;
  &lt;/directories&gt;

  &lt;accessUrls harvest:registerFileUrls="true"&gt;
    &lt;accessUrl&gt;
      &lt;baseUrl&gt;http://pds.nasa.gov/pds4&lt;/baseUrl&gt;
      &lt;offset&gt;$HOME&lt;/offset&gt;
    &lt;/accessUrl&gt;
  &lt;/accessUrls&gt;

  &lt;checksums harvest:generate="true"&gt;
    &lt;manifest&gt;$HOME/VG2PLS_archive/vg2pls_archive.md5&lt;/manifest&gt;
  &lt;/checksums&gt;

  &lt;storageIngestion&gt;
    &lt;serverUrl&gt;http://localhost:9000&lt;/serverUrl&gt;
  &lt;/storageIngestion&gt;

  &lt;candidates&gt;
    &lt;namespace harvest:prefix="dph" harvest:uri="http://pds.nasa.gov/schema/pds4/dph/v01"/&gt;

    &lt;productMetadata objectType="Product_Document"&gt;
      &lt;xPath sharvest:lotName="information_model_version"&gt;
        //Identification_Area/information_model_version
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="product_class"&gt;
        //Identification_Area/product_class
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="alternate_id"&gt;
        //Identification_Area/Alias_List/Alias/alternate_id
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="alternate_title"&gt;
        //Identification_Area/Alias_List/Alias/alternate_title
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_author_list"&gt;
        //Identification_Area/Citation_Information/author_list
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_editor_list"&gt;
        //Identification_Area/Citation_Information/editor_list
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_publication_year"&gt;
        //Identification_Area/Citation_Information/publication_year
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_keywords"&gt;
        //Identification_Area/Citation_Information/keywords
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_description"&gt;
        //Identification_Area/Citation_Information/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="modification_date"&gt;
        //Identification_Area/Modification_History/Modification_Detail/modification_date
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="modification_version_id"&gt;
        //Identification_Area/Modification_History/Modification_Detail/version_id
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="modification_description"&gt;
        //Identification_Area/Modification_History/Modification_Detail/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="external_reference_description"&gt;
        //Reference_List/External_Reference/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_revision_id"&gt;
        //Document_Description/revision_id
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_name"&gt;
        //Document_Description/document_name
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_doi"&gt;
        //Document_Description/doi
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_author_list"&gt;
        //Document_Description/author_list
      &lt;/xPath&gt;
      &lt;xPath sharvest:lotName="document_editor_list"&gt;
        //Document_Description/editor_list
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_acknowledgement_text"&gt;
        //Document_Description/acknowledgement_text
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_copyright"&gt;
        //Document_Description/copyright
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_description"&gt;
        //Document_Description/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="document_publication_date"&gt;
        //Document_Description/publication_date
      &lt;/xPath&gt;
    &lt;/productMetadata&gt;

    &lt;productMetadata objectType="Product_Observational"&gt;
      &lt;xPath harvest:slotName="information_model_version"&gt;
        //Identification_Area/information_model_version
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="product_class"&gt;
        //Identification_Area/product_class
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="alternate_id"&gt;
        //Identification_Area/Alias_List/Alias/alternate_id
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="alternate_title"&gt;
        //Identification_Area/Alias_List/Alias/alternate_title
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_author_list"&gt;
        //Identification_Area/Citation_Information/author_list
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_editor_list"&gt;
        //Identification_Area/Citation_Information/editor_list
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_publication_year"&gt;
        //Identification_Area/Citation_Information/publication_year
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_keywords"&gt;
        //Identification_Area/Citation_Information/keywords
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="citation_description"&gt;
        //Identification_Area/Citation_Information/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="modification_date"&gt;
        //Identification_Area/Modification_History/Modification_Detail/modification_date
      &lt;/xPath&gt;
      &lt;xPath slotName="modification_version_id"&gt;
        //Identification_Area/Modification_History/Modification_Detail/version_id
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="modification_description"&gt;
        //Identification_Area/Modification_History/Modification_Detail/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_comment"&gt;
        //Observation_Area/comment
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_start_date_time"&gt;
        //Observation_Area/Time_Coordinates/start_date_time
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_stop_date_time"&gt;
        //Observation_Area/Time_Coordinates/stop_date_time
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_local_mean_solar_time"&gt;
        //Observation_Area/Time_Coordinates/local_mean_solar_time
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_local_true_solar_time"&gt;
        //Observation_Area/Time_Coordinates/local_true_solar_time
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observation_solar_longitute"&gt;
        //Observation_Area/Time_Coordinates/solar_longitude
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="primary_result_type"&gt;
        //Observation_Area/Primary_Result_Description/type
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="primary_result_purpose"&gt;
        //Observation_Area/Primary_Result_Description/purpose
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="primary_result_data_regime"&gt;
        //Observation_Area/Primary_Result_Description/data_regime
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="primary_result_reduction_level"&gt;
        //Observation_Area/Primary_Result_Description/reduction_level
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="primary_result_description"&gt;
        //Observation_Area/Primary_Result_Description/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="investigation_name"&gt;
        //Observation_Area/Investigation_Area/name
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="investigation_type"&gt;
        //Observation_Area/Investigation_Area/type
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observing_system_name"&gt;
        //Observation_Area/Observing_System/name
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observing_system_description"&gt;
        //Observation_Area/Observing_System/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observing_system_component_name"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/name
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observing_system_component_description"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="observing_system_component_type"&gt;
        //Observation_Area/Observing_System/Observing_System_Component/\
        observing_system_component_type
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="target_name"&gt;
        //Observation_Area/Target_Identification/name
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="target_alternate_designation"&gt;
        //Observation_Area/Target_Identification/alternate_designation
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="target_type"&gt;
        //Observation_Area/Target_Identification/type
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="target_description"&gt;
        //Observation_Area/Target_Identification/description
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="spacecraft_clock_start_count"&gt;
        //Observation_Area/Mission_Area/dph:spacecraft_clock_start_count
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="spacecraft_clock_stop_count"&gt;
        //Observation_Area/Mission_Area/dph:spacecraft_clock_stop_count
      &lt;/xPath&gt;
      &lt;xPath harvest:slotName="external_reference_description"&gt;
        //Reference_List/External_Reference/description
      &lt;/xPath&gt;
    &lt;/productMetadata&gt;

  &lt;/candidates&gt;
&lt;/policy&gt;
       </source>

       <p>The policy file is made up of the following complex type elements: <i>registryPackage</i>, <i>collections</i>, <i>directories</i>, <i>checksums</i>, <i>storageIngestion</i>, <i>accessUrls</i>, <i>candidates</i>, and <i>productMetadata</i>.
       </p>

       <h5>registryPackage</h5>

       <p>Each time the Harvest Tool runs, it creates a package in the registry to group the product registrations together. Specify this element to give a registry package a name and/or description. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>name</td><td>Specify a package name. If this element is not specified, the default is to create a package with the name <i>Harvest-Package_&lt;current datetimestamp&gt;</i>.</td></tr>
         <tr><td>description</td><td>Specify a package description. If this element is not specified, the default is to create a description that lists the targets that were specified in the policy config file.</td></tr>
       </table>

       <h5>collections</h5>

       <p>Specify this element to tell the Harvest Tool to register the collections first before crawling a target directory. This is required if the target directory contains collections that are co-located with its members and in order to distinguish primary versus secondary members.
       </p>

       <p>The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>file</td><td>Specify a collection file. Specify this element tag more than once to point to multiple collection files.</td></tr>
       </table>

       <p>In the example above, the Harvest Tool will register the following collections before crawling the target directory:
       </p>

       <ul>
         <li>$HOME/VG2PLS_archive/data/Collection_Data.xml</li>
         <li>$HOME/VG2PLS_archive/document/Collection_document.xml</li>
       </ul>

       <p>Once these collections are registered, the primary and secondary members are cached in memory and as the Harvest Tool crawls through a target directory, any secondary members will be identified and will not be registered. In addition, a <i>SKIP</i> message will be issued in the log report to indicate that the tool has identified a non-primary member.
       </p>

       <p>In the case where the target directory consists of a hierarchy structure where the collection product is located one-level above its members, much like the PDS context bundle, then there is no need to specify the collections in the Harvest policy config file. Under this scenario, the collections will be registered first before the Harvest Tool traverses down the sub-directory containing the members.
       </p>

       <h5>directories</h5>

       <p>Specify this element to tell the Harvest Tool where to crawl for data products. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>path</td><td>Specify a directory path to start crawling. Specify this element tag more than once to point to multiple directories to crawl.</td></tr>
         <tr><td>fileFilter</td><td>Specify one or more <i>include</i> elements, where each element value contains a pattern to look for when crawling a target directory for files to register. If omitted, the default is to get all files within a directory.</td></tr>
         <tr><td>directoryFilter</td><td>Specify one or more <i>exclude</i> elements, where each element value contains a pattern to look for when crawling a target directory for sub-directories to ignore.</td></tr>
       </table>

       <p>In the example above, the Harvest tool will crawl the directory location, <i>$HOME/VG2PLS_archive</i>, looking for files that have a <i>.xml</i> file extension. The default is to touch all files in the directory if the <i>filePattern</i> element is omitted from the policy file. In addition, the <i>CONTEXT</i> directory will be ignored while traversing the target directory.
       </p>

       <h5>accessUrls</h5>

       <p>Specify this element to provide links to the physical data products. The links will be placed in the registry as slots under the slot name <i>accessUrl</i>. An optional attribute can be specified named <i>registerFileUrls</i>, which if set to <i>true</i>, will create <i>file</i> url links.
       </p>

       <p>The <i>accessUrls</i> element can contain multiple <i>accessUrl</i> element tags. The following table describes the elements that are allowed within the <i>accessUrl</i> tag:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>baseUrl</td><td>Specify a base url.</td></tr>
         <tr><td>offset</td><td>Optionally specify an offset to nix from the absolute path of each product before appending it to the base url. Can be specified more than once.</td></tr>
       </table>

       <p>In the policy example above, the Harvest Tool will nix any absolute path of a product starting with <i>$HOME</i> before appending it to the starting base url of <i>http://pds.nasa.gov/pds4</i>. The following example demonstrates what the resulting access url will be for a registered product located at <i>$HOME/VG2PLS_archive/browse/Collection_Browse.xml</i>:
       </p>

       <source>
http://pds.nasa.gov/pds4/VG2PLS_archive/browse/Collection_Browse.xml
       </source>

       <h5>checksums</h5>

       <p>Checksum generation is turned off by default in the Harvest Tool. In order to turn this on, set the <i>generate</i> attribute to <i>true</i>. The following table describes the elements that are allowed within the <i>checksum</i> tag:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>manifest</td><td>Specify a checksum manifest file. Can be specified more than once.</td></tr>
       </table>

       <p>The following describes the tool behavior based on the different checksum settings:
       </p>

       <p><i>Checksum Manifest File Provided and Generate Flag Set To true</i></p>

       <p>Harvest will generate a checksum for each file encountered and verify it against the supplied checksum file. If the data file checksum was supplied in the label, Harvest will verify it as well. A warning message will be issued in the log report if a mismatch occurs. In any case, the generated checksum value is included in the associated Product_File_Repository product.
       </p>

       <p><i>Checksum Manifest File Provided and Generate Flag Set To False (or not set at all)</i></p>

       <p>Harvest will not generate checksums, but will use the value from the checksum manifest file to populate the associated Product_File_Repository product. If a data file checksum was supplied in the label, compare the value from the manifest against the value supplied in the label and issue a warning if there is a mismatch.
       </p>

       <p><i>Checksum Manifest File Not Provided and Generate Flag Set To True</i></p>

       <p>Harvest will generate a checksum for each file encountered and verify it against an optional checksum supplied in the label. If there is a mismatch, a warning message will be issued in the log report. The generated value is included in the associated Product_File_Repository product.
       </p>

       <p><i>Checksum Manifest File Not Provided and Generate Flag Set To False</i></p>

       <p>Harvest will not generate checksums. If the data file checksum was supplied in the label, populate the associated Product_File_Repository product with that value.
       </p>

       <h5>storageIngestion</h5>

       <p>Specify this element to tell the Harvest Tool to ingest data products to the PDS Storage Service. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>serverUrl</td><td>Specify the url to the PDS Storage Service.</td></tr>
       </table>

       <p>In the example above, the Harvest Tool will ingest data products to the PDS Storage Service at <i>http://localhost:9000</i>. When a data product is ingested to the PDS Storage, it returns a product id which is a reference to the ingested product. This id is placed as a slot in the registry under the slot name <i>storageServiceProductId</i>.
       </p>

       <h5>candidates</h5>

       <p>Specify this element to tell the Harvest Tool what product types to register and what metadata to extract from a data product. This is a required element in the policy file. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>namespace</td><td>Specify to allow the Harvest Tool to extract metadata that is in a namespace other than the default PDS namespace.</td></tr>
         <tr><td>productMetadata</td><td>Specify to tell the tool what object types and what metadata to register.</td></tr>
       </table>

       <p>By default, the Harvest Tool defines the default namespace to be the PDS namespace. To override this default, specify the <i>default</i> attribute in the namespace element and give it a value of <i>true</i>. The following sets the <i>dph</i> namespace to be the default namespace in Harvest:
       </p>

       <source>
&lt;candidates&gt;
  &lt;namespace harvest:prefix="dph" harvest:uri="http://pds.nasa.gov/schema/pds4/dph/v01" harvest:default="true"/&gt;
          ...
       </source>

       <p>Namespaces need to be defined in the Harvest policy file only if the metadata to be extracted exists in a namespace other than the PDS namespace. In the example above, a namespace with the prefix <i>dph</i> and uri <i>http://pds.nasa.gov/schema/pds4/dph/v01</i> has been defined. This means that any xPath expressions defined in the policy file will be able to use the <i>dph</i> prefix to be able to extract metadata that are within the dph namespace. xPaths will be explained in greater detail in the <i>productMetadata</i> section.
       </p>

       <h5>productMetadata</h5>

       <p>Specify this element to tell the Harvest Tool what metadata to register. It requires an attribute called <i>objectType</i> that tells the Harvest Tool what product types to register. The following table describes the elements that are allowed:
       </p>

       <table>
         <tr><th>Element Name</th><th>Description</th></tr>
         <tr><td>xPath</td><td>Specify an XPath expression to extract metadata.</td></tr>
       </table>

       <p>In the example above, the policy file tells the Harvest Tool to look for and register the <i>Product_Document</i> and <i>Product_Observational</i> object types.
       </p>

       <p>Also in the example is a set of <i>xPath</i> elements found under each <i>productMetadata</i> element. This defines what metadata to extract from the different products. XPath is a query language that uses path expressions to select nodes in an XML document. These path expressions look very much like expressions in a traditional computer file system. In its simplest form, prepending a <i>//</i> before a name will find the element no matter where it is in the XML file.
       </p>

       <p>The following XPath expression will find the <i>start_date_time</i> element within the default namespace, no matter where this element is located in the file:
       </p>

       <source>
//start_date_time
       </source>

       <p>The following XPath expression will find the <i>spacecraft_clock_start_count</i> element within the dph namespace, no matter where this element is located in the file:
       </p>

       <source>
//dph:spacecraft_clock_start_count
       </source>


       <p>The following XPath expression will find all <i>information_model_version</i> elements that are children of <i>Identification_Area</i> within the default namespace:
       </p>

       <source>
//Identification_Area/information_model_version
       </source>

       <p>The following XPath expression will find all <i>name</i> elements that are children of <i>Target_Identification</i> and that have a value of <i>MARS</i>:
       </p>

       <source>
//Target_Identification/name[text()="MARS"]
       </source>

       <p>For a more detailed explanation on XPath, go to your favorite search engine and type <i>XPath tutorial</i>.
       </p>

       <p>The <i>slotName</i> attribute within the <i>xPath</i> element allows the renaming of metadata element names when they are registered as slots in the registry. By default, the slot name is set to the element name that results from an xpath expression. For example, for the xpath expression, //Target_Identification/name, the slot name will be set to <i>name</i>.
       </p>

       <p>The following demonstrates setting the policy file to find any <i>name</i> elements that are children of <i>Target_Identification</i> and setting the slot name to <i>target_identification_name</i>:
       </p>

       <source>
&lt;xPath harvest:slotName="target_identification_name"&gt;//Target_Identification/name&lt;/xPath&gt;
       </source>
     </subsection>
  </section>

  <section name="Search API Config Files">
    <p>The Search API XML configuration files include query information, data source specifications, and the fields to be included in the index. The following sections will outline the basic schema for creating a configuration file. Once a configuration file has been created, you can specify its location using the <i>-C</i> command-line option.
    </p>

    <subsection name="Defaults">
      <p>Default configurations are provided for the following data types (assumes Harvest is installed at <i>/usr/local/harvest</i>, if not, update the file paths as needed):
      </p>

      <table>
        <tr><th>File Name</th><th>Product Class</th></tr>
        <tr><td colspan="2"><b>PDS4 Products (/usr/local/harvest/conf/search/defaults/pds/pds4)</b></td></tr>
        <tr>
          <td>attribute.xml</td>
          <td>Product_Attribute_Definition</td>
        </tr>
        <tr>
          <td>bundle.xml</td>
          <td>Product_Bundle</td>
        </tr>
        <tr>
          <td>class.xml</td>
          <td>Product_Class_Definition</td>
        </tr>
        <tr>
          <td>collection.xml</td>
          <td>Product_Collection</td>
        </tr>
        <tr>
          <td>context.xml</td>
          <td>Product_Context</td>
        </tr>
        <tr>
          <td>document.xml</td>
          <td>Product_Document</td>
        </tr>
        <tr>
          <td>observational.xml</td>
          <td>Product_Observational</td>
        </tr>
        <tr>
          <td>service.xml</td>
          <td>Product_Service</td>
        </tr>
      </table>
    </subsection>

    <subsection name="Format">
      <p>The following is an example snippet of one of the Search Core configuration files:
      </p>

      <source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;product&gt;
  &lt;specification&gt;
    &lt;title&gt;PDS4-Observational&lt;/title&gt;
    &lt;query&gt;
      &lt;registryPath&gt;objectType&lt;/registryPath&gt;
      &lt;value&gt;Product_Observational&lt;/value&gt;
    &lt;/query&gt;
    &lt;query&gt;
      &lt;registryPath&gt;status&lt;/registryPath&gt;
      &lt;value&gt;Approved&lt;/value&gt;
    &lt;/query&gt;
    &lt;checkAssociations&gt;true&lt;/checkAssociations&gt;
  &lt;/specification&gt;

  &lt;indexFields&gt;
    &lt;!-- Identifier Fields --&gt;
    &lt;field name="search_id" type="required"&gt;
      &lt;outputString format="text"&gt;pds4:{lid}&lt;/outputString&gt;
    &lt;/field&gt;
    &lt;field name="identifier" type="required"&gt;
      &lt;registryPath&gt;lid&lt;/registryPath&gt;
    &lt;/field&gt;
    &lt;field name="version_id" type="string"&gt;
      &lt;registryPath&gt;version_id&lt;/registryPath&gt;
    &lt;/field&gt;
    ...
  &lt;/indexFields&gt;
&lt;/product&gt;
      </source>
    </subsection>
    
    <subsection name="Specifying Resources">
      <p>The <i>resources/</i> folder in the Harvest Tool Release Package contains a JSON-formatted file that represents a snapshot of the Resource Products currently registerd at the PDS Engineering Node. This file is read in at execution time so that the tool can populate the <i>resource.*</i> fields set in the Search Core configuration files. Below is an example of how a resource is formatted in this file:  
      </p>
        
      <source>
  "urn:nasa:pds:context:resource:resource.a17fuvs_online": {
    "resource_name": "Apollo 17 Far-Ultraviolet Spectrometer (FUVS) Data Graphs Bundle Archive Online", 
    "resource_url": "http://pds-geosciences.wustl.edu/lunar/urn-nasa-pds-a17fuvs/"
  }    
      </source>
      <p><i>urn:nasa:pds:context:resource:resource.a17fuvs_online</i> represents the LID of the Resource, while <i>resource_name</i> and <i>resource_url</i> is the name to give to the Resource and the URL, respectively. In the event that your particular resource does not exist, simply edit the <i>resources/registered_resources.json</i> file and add to the existing list in ths above format.
      </p>
    </subsection>

  </section>


  <section name="Report Format">
    <p>This section describes the contents of the Harvest Tool report. At this time, the Harvest Tool only outputs a series of log messages. The log will report the success or failure of a discovered product attempting to be registered. Additionally, any syntactical errors in a discovered product are reported. A log consists of a severity level, file name, and a message. The following is an example of some of the log messages that can be expected from the Harvest Tool:
     </p>

     <source>
PDS Harvest Tool Log

Version                     Version 0.4.0
Time                        Thu, Feb 07 2019 at 10:27:08 AM
Target(s)                   [/Users/mcayanan/pds4/V1900/dph_example_archive]
File Inclusions             [*.xml]
Severity Level              INFO
Config directory            ../conf/search/defaults
Output directory            /Users/mcayanan/harvest-0.4.0-dev/bin/solr-docs

INFO:   XML extractor set to the following default namespace: http://pds.nasa.gov/pds4/pds/v1
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_eetable/collection_eetable_inventory.xml] \ 
 Begin processing.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_eetable/collection_eetable_inventory.xml] \ 
 Mapping reference type 'inventory_has_member_product' to 'member_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_eetable/collection_eetable_inventory.xml] \ 
 line 42: Mapping reference type 'collection_to_investigation' to 'investigation_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_eetable/collection_eetable_inventory.xml] \ 
 line 52: Mapping reference type 'is_instrument_host' to 'instrument_host_ref'.
.
.
.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_imagecube/collection_imagecube_inventory.xml] \ 
 Setting LIDVID-based association, 'urn:nasa:pds:izenberg_pdart14_meap:data_imagecube:virs_cube_64ppd_h02nw::1.0', under slot name 'member_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_imagecube/collection_imagecube_inventory.xml] \ 
 Setting LIDVID-based association, 'urn:nasa:pds:izenberg_pdart14_meap:data_imagecube:virs_cube_64ppd_h02se::1.0', under slot name 'member_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_imagecube/collection_imagecube_inventory.xml] \ 
 Setting LIDVID-based association, 'urn:nasa:pds:izenberg_pdart14_meap:data_imagecube:virs_cube_64ppd_h02sw::1.0', under slot name 'member_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/data_imagecube/collection_imagecube_inventory.xml] \ 
 Setting LIDVID-based association, 'urn:nasa:pds:izenberg_pdart14_meap:data_imagecube:virs_cube_64ppd_h03ne::1.0', under slot name 'member_ref'.

INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/bundle_izenberg_pdart14_meap.xml] \ 
 line 40: Mapping reference type 'bundle_to_investigation' to 'investigation_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/bundle_izenberg_pdart14_meap.xml] \ 
 line 50: Mapping reference type 'is_instrument_host' to 'instrument_host_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/bundle_izenberg_pdart14_meap.xml] \ 
 line 58: Mapping reference type 'is_instrument' to 'instrument_ref'.
.
.
. 
 Setting LID-based association, 'urn:nasa:pds:context:target:planet.mercury', under slot name 'target_ref'.
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/document/meap_spec.xml] \ 
 Capturing file information for meap_spec.xml
INFO:   [/Users/mcayanan/pds4/V1900/dph_example_archive/document/meap_spec.xml] \ 
 Capturing file object metadata for meap_spec.pdf
.
.
.

Summary:

16 of 16 file(s) processed, 1 other file(s) skipped
0 error(s), 0 warning(s)

Product Labels:
16         Successfully registered  
0          Failed to register       

Search Service Solr Documents:
16         Successfully created     
0          Failed to get created    

Product Types Handled:
4 Product_Collection
5 Product_Observational
6 Product_Document
1 Product_Bundle

Registry Package Id: e297e819-1fb9-4e96-96d3-ce0c6bce3565

End of Log

     </source>
    </section>

    <section name="Common Errors">
      <subsection name="Namespace Mismatch Error">
        <p>Execution of the Harvest Tool may result in the following message appearing in the log:
        </p>
  
        <source>
  INFO:   XML extractor set to the following default namespace: \
  http://pds.nasa.gov/schema/pds4/pds
  INFO:   [/pds4/VG2PLS_archive/Product_Bundle.xml] Begin processing.
  SKIP:   [/pds4/VG2PLS_archive/Product_Bundle.xml] No product_class element found.
        </source>
  
        <p>The message above is normally the result of a namespace mismatch between the Harvest Tool configuration and the product labels being registered. See the <a href="#PDS4_Data_Product_Registration">PDS4 Data Product Registration</a> section above for details on specifying the namespace in the configuration file. By the way, the message could be telling the truth where the product label does not contain the &lt;product_class&gt; element. If this is the case, then the file is not a valid PDS product label.
        </p>
      </subsection>
      <subsection name="Illegal Reflective Access Operation Warning">
        <p>Execution of the Harvest Tool may result in the following message appearing after execution starts:</p>
        <source>
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1 (file:/Users/jpadams/test/harvest-2.0.0/lib/jaxb-impl-2.2.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
WARNING: Please consider reporting this to the maintainers of com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
        </source>
        <p>These WARNING messages appear if the software is run with Java versions 9+. Although they are nuisance, they will not negatively impact your Harvest run.</p>
      </subsection>
      <subsection name="Failed XPath Ingestion">
        <p>Execution of the Harvest Tool may result in the following message appearing in the log:
        </p>
        
        <source>
          TBD
        </source>
        
        <p>TBD
        </p>
      </subsection>
    </section>
  </body>
</document>
